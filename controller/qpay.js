const axios = require("axios");
const asyncHandler = require("../middleware/asyncHandler.js");
const invoiceModel = require("../models/invoice.js");
const qpay = require("../middleware/qpay");
const customerModel = require("../models/customer.js");
const companyModel = require("../models/company.js");
const Appointment = require("../models/appointment.js");
const Option = require("../models/option.js");
const Service = require("../models/service.js");
const schedule = require("../models/schedule.js");
const company = require("../models/company.js");
const customResponse = require("../utils/customResponse");

exports.createqpay = asyncHandler(async (req, res) => {
  try {
    const { access_token } = await qpay.makeRequest();
    if (!access_token) {
      return res.status(500).json({
        success: false,
        message: "QPay token –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
      });
    }

    const invoice = await invoiceModel.findById(req.params.id).populate({
      path: "appointment",
    });

    if (!invoice) {
      return res.status(404).json({
        success: false,
        message: "Invoice not found",
      });
    }

    let amount = 0;
    let packageName = "–ë–∞–≥—Ü";
    let companyName = "–ö–æ–º–ø–∞–Ω–∏";

    const durationMap = {
      one: 1,
      six: 6,
      year: 12,
    };

    // üéØ Option-based invoice (package)
    if (invoice.isOption) {
      const opt = await Option.findById(invoice.package);
      if (!opt) {
        return res.status(400).json({
          success: false,
          message: "Package not found",
        });
      }
      const durationInMonths = durationMap[invoice.appointment.duration];
      amount = Number(opt.price * durationInMonths * (1 - invoice.discount));
      packageName = (opt.name || "–ë–∞–≥—Ü").toUpperCase();
    } else {
      // üéØ Appointment-based invoice (service)
      const appointment = await Appointment.findById(
        invoice.appointment._id
      ).populate({
        path: "schedule",
        populate: {
          path: "serviceId",
          populate: {
            path: "companyId",
            model: "Company",
            select: "name advancePayment",
          },
        },
      });

      if (!appointment) {
        return res.status(400).json({
          success: false,
          message: "Appointment not found",
        });
      }

      const schedule = appointment.schedule;
      const service = schedule?.serviceId;
      const company = service?.companyId;

      if (!service || !company) {
        return res.status(400).json({
          success: false,
          message: "Schedule, Service, or Company missing",
        });
      }

      const servicePrice = parseFloat(service.price);
      const advancePercent = parseFloat(company.advancePayment || 0);
      companyName = (company.name || "–ö–æ–º–ø–∞–Ω–∏").toUpperCase();

      amount = invoice.isAdvance
        ? Math.floor((servicePrice * advancePercent) / 100)
        : servicePrice;
    }

    // ‚úÖ Sender invoice ID
    const currentDateTime = new Date();
    const randomToo = Math.floor(Math.random() * 99999);
    const sender_invoice_no = `${currentDateTime
      .toISOString()
      .replace(/[:.]/g, "-")}-${randomToo}`;

    const invoicePayload = {
      invoice_code: process.env.invoice_code,
      sender_invoice_no,
      sender_branch_code: "branch",
      invoice_receiver_code: "terminal",
      invoice_receiver_data: {
        phone: `${req.body.phone || ""}`,
      },
      invoice_description: `${packageName}_${companyName}`,
      callback_url: `${process.env.AppRentCallBackUrl}${sender_invoice_no}`,
      lines: [
        {
          tax_product_code: `${randomToo}`,
          line_description: "“Æ–π–ª—á–∏–ª–≥—ç—ç",
          line_quantity: 1,
          line_unit_price: amount,
        },
      ],
    };

    const response = await axios.post(
      `${process.env.qpayUrl}invoice`,
      invoicePayload,
      {
        headers: {
          Authorization: `Bearer ${access_token}`,
        },
      }
    );

    if (response.status === 200) {
      const invoiceUpdate = await invoiceModel.findByIdAndUpdate(
        req.params.id,
        {
          sender_invoice_id: sender_invoice_no,
          qpay_invoice_id: response.data.invoice_id,
          price: amount,
        },
        { new: true }
      );

      return res.status(200).json({
        success: true,
        invoice: invoiceUpdate,
        data: response.data,
      });
    } else {
      throw new Error("QPay invoice “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞");
    }
  } catch (error) {
    console.error("‚ùå createqpay error:", error.message);
    return res.status(500).json({ success: false, error: error.message });
  }
});

exports.callback = asyncHandler(async (req, res) => {
  console.log("üì• [CALLBACK] QPay webhook –∏—Ä–ª—ç—ç:");
  console.log("üî∏ req.params:", req.params);
  console.log("üî∏ req.query:", req.query);
  console.log("üî∏ req.headers:", req.headers);
  console.log("üî∏ req.body:", req.body);

  try {
    const io = req.app.get("io");
    const { id: senderInvoiceId } = req.params;

    const record = await invoiceModel.findOne({
      sender_invoice_id: senderInvoiceId,
    });

    if (!record) {
      console.warn("‚ö†Ô∏è Invoice not found:", senderInvoiceId);
      return res.status(404).json({
        success: false,
        message: "Invoice not found",
      });
    }

    if (record.status === "paid") {
      console.log("üíµ Invoice already paid:", record.qpay_invoice_id);
      return res.status(200).json({
        success: true,
        message: "–¢”©–ª–±”©—Ä –∞–ª—å —Ö—ç–¥–∏–π–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ç”©–ª”©–≥–¥—Å”©–Ω –±–∞–π–Ω–∞",
        order: record.appointment,
      });
    }

    const checkPaymentStatus = async (token) => {
      return await axios.post(
        `${process.env.qpayUrl}payment/check`,
        {
          object_type: "INVOICE",
          object_id: record.qpay_invoice_id,
          offset: {
            page_number: 1,
            page_limit: 100,
          },
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );
    };

    let qpay_token = await qpay.makeRequest();
    let access_token = qpay_token?.access_token;

    if (!access_token) {
      return res.status(500).json({
        success: false,
        message: "QPay access token not received",
      });
    }

    console.log("‚úÖ Access token –∞–º–∂–∏–ª—Ç—Ç–∞–π –∞–≤–ª–∞–∞:", access_token);

    let checkResponse;

    try {
      checkResponse = await checkPaymentStatus(access_token);
    } catch (err) {
      const errData = err.response?.data || {};
      console.warn("‚ö†Ô∏è Initial token error:", errData);

      if (errData.code === "InvalidAccessToken") {
        console.log("üîÑ Retrying with force new token...");
        const retryToken = await qpay.makeRequest(true); // üî• force:true ”©–≥–Ω”©
        access_token = retryToken?.access_token;

        if (!access_token) {
          return res.status(500).json({
            success: false,
            message: "QPay retry access_token failed",
          });
        }

        checkResponse = await checkPaymentStatus(access_token);
      } else {
        throw err;
      }
    }
    console.log("access_token:2", access_token);
    console.log("üì¶ QPay /payment/check —Ö–∞—Ä–∏—É:", checkResponse.data);

    const isPaid =
      checkResponse.data.count === 1 &&
      checkResponse.data.rows[0]?.payment_status === "PAID";

    if (!isPaid) {
      console.warn("üí≥ –¢”©–ª–±”©—Ä –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∏–π–≥–¥—ç—ç–≥“Ø–π –±–∞–π–Ω–∞");
      return res.status(402).json({
        success: false,
        message: "–¢”©–ª–±”©—Ä —Ö–∞—Ä–∞–∞—Ö–∞–Ω –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∏—à –±–∞–π–Ω–∞",
      });
    }

    // ‚úÖ —Ç”©–ª”©–≤ —à–∏–Ω—ç—á–ª—ç—Ö
    record.status = "paid";
    await record.save();

    const app = await Appointment.findById(record.appointment).populate({
      path: "schedule",
      populate: {
        path: "serviceId",
        populate: {
          path: "companyId",
          select: "name bankNumber commissionRate done companyOwner",
        },
      },
    });

    if (!app) {
      return res
        .status(404)
        .json({ success: false, message: "Appointment not found" });
    }

    app.status = "paid";
    await app.save();

    const service = app.schedule.serviceId;
    const company = service.companyId;

    service.done++;
    await service.save();

    company.done++;
    await company.save();

    const totalAmount = Number(record.price);
    const commission = Number(company.commissionRate || 0);
    const payout = Math.floor(totalAmount * ((100 - commission) / 100));

    console.log("üí∞ Total price:", totalAmount);
    console.log("üìâ Commission rate:", commission, "%");
    console.log("üè¶ Khan-–¥ —à–∏–ª–∂“Ø“Ø–ª—ç—Ö –¥“Ø–Ω (payout):", payout, "MNT");
    console.log("üè¶ –ö–æ–º–ø–∞–Ω–∏ –±–∞–Ω–∫–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª:");
    console.log("üîπ companyOwner1:", company.companyOwner);
    console.log("üîπ bankNumber1:", company.bankNumber);

    if (!payout || isNaN(payout) || payout <= 0) {
      console.warn("‚ùå payout —É—Ç–≥–∞ –±—É—Ä—É—É –±–∞–π–Ω–∞:", payout);
      return res.status(500).json({
        success: false,
        message: "–®–∏–ª–∂“Ø“Ø–ª—ç—Ö –¥“Ø–Ω –∞–ª–¥–∞–∞—Ç–∞–π –±–∞–π–Ω–∞",
      });
    }

    await axios.post(
      `${process.env.khanUrl}/transfer`,
      {
        fromAccount: process.env.corporateAccountNumber,
        toAccount: company.bankNumber,
        amount: payout,
        currency: "MNT",
        description: `–®–∏–ª–∂“Ø“Ø–ª—ç–≥: ${company.name} `,
      },
      {
        auth: {
          username: process.env.corporateUserName,
          password: process.env.corporateTranPass,
        },
      }
    );

    io.emit("paymentDone");

    return res.status(200).json({
      success: true,
      message: "–¢”©–ª–±”©—Ä –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∏–π–≥–¥—ç–∂, –º”©–Ω–≥”© —à–∏–ª–∂“Ø“Ø–ª–ª—ç—ç",
      order: app,
    });
  } catch (error) {
    console.error(
      "‚ùå QPay Callback Error:",
      error.response?.data || error.message
    );
    return res.status(500).json({
      success: false,
      message: "–°–∏—Å—Ç–µ–º–∏–π–Ω –∞–ª–¥–∞–∞",
      error: error.message,
    });
  }
});

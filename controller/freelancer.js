const Freelancer = require("../models/freelancer");
const Appointment = require("../models/appointment");
const asyncHandler = require("../middleware/asyncHandler");
const jwt = require("jsonwebtoken");
const sendMessage = require("../utils/callpro");

const customResponse = require("../utils/customResponse");
const OTP = require("../models/freelancerOTP");

function generateOTP(length = 4) {
  let otp = "";
  const characters = "0123456789";

  for (let i = 0; i < length; i++) {
    otp += characters[Math.floor(Math.random() * characters.length)];
  }

  return otp;
}

// Exports
exports.validatePhone = asyncHandler(async (req, res) => {
  const { phone } = req.body;
  console.log("‚úåÔ∏èphone --->", phone);
  if (!phone) return customResponse.error(res, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä–∞–∞ –æ—Ä—É—É–ª–Ω–∞ —É—É");

  const user = await Freelancer.findOne({ phone }).select("+pin");
  if (!user) return customResponse.error(res, "–£—Ç–∞—Å –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞");

  return res.status(200).json({ success: true });
});

exports.getOtpAgain = asyncHandler(async (req, res) => {
  try {
    const { phone } = req.body;
    const otp = generateOTP();

    await OTP.findOneAndUpdate(
      { phone, type: "freelancer" },
      { otp },
      { upsert: true }
    );

    await sendMessage(phone, `–¢–∞–Ω—ã –Ω—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥: ${otp}`);

    res.status(200).json({
      success: true,
      message: "OTP –∞–º–∂–∏–ª—Ç—Ç–∞–π –¥–∞—Ö–∏–Ω –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç",
    });
  } catch (error) {
    console.error("üî• [getOtpAgain] Error:", error);
    customResponse.server(res, error.message);
  }
});

exports.getAll = asyncHandler(async (req, res, next) => {
  try {
    const allUser = await Freelancer.find();
    const total = await Freelancer.countDocuments();
    res.status(200).json({
      success: true,
      count: total,
      data: allUser,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.getCustomerAppointments = asyncHandler(async (req, res) => {
  try {
    // 1Ô∏è‚É£ Appointment —Ö–∞–π–∂ —Ç–∞—Ç–∞—Ö + schedule ‚Üí service ‚Üí company, artist-–∏–π–≥ populate —Ö–∏–π—Ö
    const allAppointments = await Appointment.find({
      user: req.userId,
      status: { $in: ["paid", "done", "completed", "pending"] },
    })
      .populate({
        path: "schedule",
        populate: [
          { path: "serviceId" },
          { path: "artistId" },
          { path: "companyId" }, // Schedule ‚Üí company
        ],
      })
      .populate("company"); // Appointment ‚Üí company

    // 3Ô∏è‚É£ –≠—Ü—Å–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥ –±—É—Ü–∞–∞—Ö
    res.status(200).json({
      success: true,
      data: allAppointments,
    });
  } catch (error) {
    console.error("‚ùå [ERROR] getCustomerAppointments:", error.message);
    customResponse.error(res, error.message);
  }
});

exports.getMe = asyncHandler(async (req, res, next) => {
  try {
    if (!req.headers.authorization) {
      return res.status(200).json({
        success: false,
        message: "–¢–∞ —ç—Ö–ª—ç—ç–¥ –Ω—ç–≤—Ç—Ä—ç–Ω—ç “Ø“Ø",
      });
    }
    const token = req.headers.authorization.split(" ")[1];
    if (!token) {
      return res.status(200).json({
        success: false,
        message: "–¢–æ–∫–µ–Ω —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞",
      });
    }
    const tokenObj = jwt.verify(token, process.env.JWT_SECRET);
    const user = await Freelancer.findById(tokenObj.Id);
    const tokens = user.getJsonWebToken();
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
      });
    }
    return res.status(200).json({
      success: true,
      data: user,
      token: tokens,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.customerUpdateTheirOwnInformation = asyncHandler(
  async (req, res, next) => {
    try {
      if (req.userId != req.params.id) {
        return res.status(200).json({
          success: false,
          msg: "–¢–∞ –∑”©–≤—Ö”©–Ω ”©”©—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ ”©”©—Ä—á–ª”©–∂ –±–æ–ª–Ω–æ",
        });
      }
      const old = await Freelancer.findById(req.params.id);
      const data = await Freelancer.findByIdAndUpdate(req.params.id, {
        ...req.body,
        photo: req.file ? req.file.filename : old.photo,
      });
      const token = old.getJsonWebToken();
      return res.status(200).json({
        success: true,
        data,
        token,
      });
    } catch (error) {
      customResponse.error(res, error.message);
    }
  }
);

exports.registerWithPhone = asyncHandler(async (req, res) => {
  try {
    const { phone } = req.body;

    const existingUser = await Freelancer.findOne({ phone, status: true });
    if (existingUser) {
      return res.status(400).json({
        success: false,
        message: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞",
      });
    }

    const otp = generateOTP();

    await OTP.findOneAndUpdate(
      { phone, type: "freelancer" },
      { otp, data: req.body, type: "freelancer" },
      { upsert: true }
    );

    await sendMessage(phone, `–¢–∞–Ω—ã –Ω—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥: ${otp}`);

    return res.status(200).json({
      success: true,
      message: "OTP –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç",
    });
  } catch (error) {
    console.error("üî• registerWithPhone error:", error);
    return res.status(500).json({
      success: false,
      message: error.message || "–î–æ—Ç–æ–æ–¥ —Å–µ—Ä–≤–µ—Ä–∏–π–Ω –∞–ª–¥–∞–∞",
    });
  }
});

exports.register = asyncHandler(async (req, res, next) => {
  try {
    if (!req.body.pin) {
      customResponse.error(res, "–¢–∞ –ø–∏–Ω –æ—Ä—É—É–ª–∂ ”©–≥–Ω”© “Ø“Ø ");
    }
    const existingUser = await Freelancer.findOne({ phone: req.body.phone });

    if (existingUser) {
      return res.status(200).json({
        success: false,
        message: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞",
      });
    }

    const inputData = {
      ...req.body,
      photo: req.file?.filename ? req.file.filename : "no user photo",
    };

    const user = await Freelancer.create(inputData);
    const token = user.getJsonWebToken();

    customResponse.success(res, "–ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç");
  } catch (error) {
    console.log(error);
    customResponse.error(res, error.message);
  }
});

// OTP verification endpoint
exports.verifyOtp = asyncHandler(async (req, res) => {
  try {
    const { phone, otp } = req.body;
    console.log("‚úåÔ∏èotp --->", otp);
    console.log("‚úåÔ∏èphone --->", phone);

    const userOtp = await OTP.findOne({ phone, type: "freelancer" });
    if (!userOtp || userOtp.otp !== otp) {
      return res.status(400).json({
        success: false,
        message: "OTP –±—É—Ä—É—É —ç—Å–≤—ç–ª —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω –±–∞–π–Ω–∞.",
      });
    }

    let user = await Freelancer.findOne({ phone });
    console.log("‚úåÔ∏èuser --->", user);
    if (user) {
      await OTP.deleteOne({ phone, type: "freelancer" });
      return res.status(200).json({
        success: true,
        message: "–ë–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω –±–∞–π–Ω–∞",
        token: user.getJsonWebToken(),
        data: user,
      });
    }

    // OTP –¥—ç—ç—Ä —Ö–∞–¥–≥–∞–ª—Å–∞–Ω –º—ç–¥—ç—ç–ª–ª—ç—ç—Ä —Ö—ç—Ä—ç–≥–ª—ç–≥—á “Ø“Ø—Å–≥—ç–Ω—ç
    user = await Freelancer.create(userOtp.data);
    console.log("‚úåÔ∏èuser --->", user);
    await OTP.deleteOne({ phone, type: "freelancer" });

    return res.status(200).json({
      success: true,
      message: "OTP –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–∞—Ç–∞–ª–≥–∞–∞–∂—Å–∞–Ω. –•—ç—Ä—ç–≥–ª—ç–≥—á –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç.",
      token: user.getJsonWebToken(),
      data: user,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.setPin = asyncHandler(async (req, res) => {
  try {
    const authHeader = req.headers.authorization;

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.log("‚ùå Authorization header –±—É—Ä—É—É –±–∞–π–Ω–∞");
      return res.status(401).json({
        success: false,
        message: "–¢–æ–∫–µ–Ω –¥–∞–º–∂—É—É–ª–∞–∞–≥“Ø–π –±–∞–π–Ω–∞",
      });
    }

    const token = authHeader.split(" ")[1];
    const { pin } = req.body;

    if (!pin) {
      console.log("‚ùå PIN –¥—É—Ç—É—É –±–∞–π–Ω–∞");
      return res.status(400).json({
        success: false,
        message: "PIN –∫–æ–¥ –¥—É—Ç—É—É –±–∞–π–Ω–∞",
      });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    const user = await Freelancer.findById(decoded.Id);

    if (!user || !user.status) {
      return res.status(403).json({
        success: false,
        message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –±–∞—Ç–∞–ª–≥–∞–∞–∂–∞–∞–≥“Ø–π –±–∞–π–Ω–∞",
      });
    }

    user.pin = pin;
    await user.save();

    return res.status(200).json({
      success: true,
      message: "PIN –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞",
      token, // ‚Üê —ç–Ω—ç –¥—É—Ç–∞–≥–¥–∞–∂ –±–∞–π–Ω–∞!
      data: user,
    });
  } catch (error) {
    console.error("üî• setPin –∞–ª–¥–∞–∞:", error.message);
    customResponse.error(res, error.message);
  }
});

exports.forgotPassword = asyncHandler(async (req, res) => {
  const { phone } = req.body;
  let user;

  user = await Freelancer.findOne({ phone });

  if (!user) {
    return res.status(404).json({
      success: false,
      message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π —ç—Å–≤—ç–ª –º—ç–¥—ç—ç–ª—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞.",
    });
  }
  const otp = generateOTP();

  try {
    user.pin = otp;
    await user.save();
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.",
    });
  }

  try {
    await sendMessage(phone, `–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥ ${otp} –±–æ–ª–∂ —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.`);
  } catch (error) {
    console.error("Error sending OTP:", error.message);
    return res.status(500).json({
      success: false,
      message: "OTP –∏–ª–≥—ç—ç—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.",
    });
  }

  return res.status(200).json({
    success: true,
    message: `–ê–º–∂–∏–ª—Ç—Ç–∞–π. –¢–∞–Ω—ã —à–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π —É—Ç–∞—Å —Ä—É—É –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç.`,
  });
});

exports.loginWithPhone = asyncHandler(async (req, res, next) => {
  try {
    const { phone, pin } = req.body;

    if (!phone) {
      return customResponse.error(res, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä–∞–∞ –æ—Ä—É—É–ª–Ω–∞ —É—É!");
    }

    // üìå –•—ç—Ä—ç–≥–ª—ç–≥—á —Ö–∞–π–Ω–∞
    const user = await Freelancer.findOne({ phone }).select("+pin");

    if (!user) {
      return customResponse.error(res, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞");
    }

    // üìå –•—ç—Ä–≤—ç—ç —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω pin –±–∞–π—Ö–≥“Ø–π –±–æ–ª ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä “Ø“Ø—Å–≥—ç—ç–¥ SMS –∏–ª–≥—ç—ç–Ω—ç
    if (!user.pin) {
      const generatedPin = generateOTP(4);
      const hashedPin = await user.hashPin(generatedPin);

      await Freelancer.updateOne({ _id: user._id }, { pin: hashedPin });

      await sendMessage(
        phone,
        `–¢–∞–Ω—ã –Ω—ç–≤—Ç—Ä—ç—Ö –Ω—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü –∫–æ–¥: ${generatedPin}`
      );

      return res.status(200).json({
        success: false,
        message:
          "–¢–∞–Ω—ã –Ω—É—É—Ü –∫–æ–¥ “Ø“Ø—Å—ç–∂ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –¥—É–≥–∞–∞—Ä—Ç –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.",
      });
    }

    // üìå Pin –±–∞–π–≥–∞–∞ —Ç–æ—Ö–∏–æ–ª–¥–æ–ª–¥ —à–∞–ª–≥–∞–Ω–∞
    if (!pin) {
      return customResponse.error(res, "PIN –∫–æ–¥–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É!");
    }

    const isMatch = await user.checkPassword(pin);
    if (!isMatch) {
      return customResponse.error(res, "–¢–∞–Ω—ã –æ—Ä—É—É–ª—Å–∞–Ω –Ω—É—É—Ü –∫–æ–¥ –±—É—Ä—É—É –±–∞–π–Ω–∞!");
    }

    // üìå JWT “Ø“Ø—Å–≥—ç–∂ –±—É—Ü–∞–∞–Ω–∞
    const token = user.getJsonWebToken();
    return res.status(200).json({
      success: true,
      isArtist: false,
      token,
      data: user,
    });
  } catch (error) {
    console.error("loginWithPhone error:", error);
    return customResponse.error(res, error.message);
  }
});

exports.updateUserFCM = asyncHandler(async (req, res, next) => {
  try {
    const { token, isAndroid } = req.body;

    const userFind = await Freelancer.findById(req.userId);

    if (userFind) {
      userFind.firebase_token = token;
      userFind.isAndroid = isAndroid;

      const savedUser = await userFind.save();
    } else {
    }

    res.status(200).json({
      success: true,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.update = asyncHandler(async (req, res, next) => {
  try {
    const old = await Freelancer.findById(req.params.id);
    const updatedData = {
      ...req.body,
      photo: req.file ? req.file.filename : old.photo,
    };

    const upDateUserData = await Freelancer.findByIdAndUpdate(
      req.params.id,
      updatedData,
      {
        new: true,
      }
    );
    return res.status(200).json({
      success: true,
      data: upDateUserData,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.get = asyncHandler(async (req, res, next) => {
  try {
    const allText = await Freelancer.findById(req.params.id);
    return res.status(200).json({
      success: true,
      data: allText,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.deleteModel = asyncHandler(async (req, res, next) => {
  try {
    const deletePost = await Freelancer.findByIdAndDelete(req.params.id, {
      new: true,
    });
    return res.status(200).json({
      success: true,
      msg: "–ê–∂–∏–ª—Ç—Ç–∞–π —É—Å–≥–∞–≥–¥–ª–∞–∞",
      data: deletePost,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

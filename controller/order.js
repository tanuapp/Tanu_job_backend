const asyncHandler = require("../middleware/asyncHandler");
const mongoose = require("mongoose");
const Order = require("../models/order");
const Service = require("../models/service");
const Freelancer = require("../models/freelancer");
const Customer = require("../models/customer");
const Notification = require("../models/notification");
const sendFirebaseNotification = require("../utils/sendFIrebaseNotification");

const customResponse = require("../utils/customResponse");

const DISPATCH_LIMIT = 5;
const DISPATCH_EXPIRES_MS = 60 * 1000; // ‚Üê —Ç–∞ —Ö—ç–ª—Å—ç–Ω 60—Å–µ–∫

// in-memory —Ç–∞–π–º–µ—Ä—É—É–¥ (prod-–¥ BullMQ-—Ä —Å–æ–ª–∏–Ω–æ)
const dispatchTimers = new Map(); // orderId -> timeoutId

exports.getNearbyFreelancers = asyncHandler(async (req, res) => {
  console.log("===== üìç GET /freelancer/nearby —ç—Ö—ç–ª–ª—ç—ç =====");

  const { lat, lng } = req.query;
  console.log("üëâ –ò—Ä—Å—ç–Ω query:", req.query);

  if (!lat || !lng) {
    console.log("‚ùå –ê–ª–¥–∞–∞: lat/lng –∏—Ä—ç—ç–≥“Ø–π –±–∞–π–Ω–∞");
    return res.status(400).json({
      success: false,
      message: "lat/lng –ø–∞—Ä–∞–º–µ—Ç—Ä —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π",
    });
  }

  console.log(`‚úÖ lat=${lat}, lng=${lng}`);

  try {
    const freelancers = await Freelancer.aggregate([
      {
        $geoNear: {
          near: { type: "Point", coordinates: [Number(lng), Number(lat)] },
          key: "location",
          distanceField: "dist",
          spherical: true, // ‚ùå maxDistance –±–∞–π—Ö–≥“Ø–π
          query: { online: true },
        },
      },
      { $sort: { dist: 1, rating_avg: -1 } },
      { $limit: 20 },
    ]);

    console.log("üëâ –û–ª–¥—Å–æ–Ω freelancers —Ç–æ–æ:", freelancers.length);

    if (freelancers.length > 0) {
      console.log("üëâ –≠—Ö–Ω–∏–π freelancer:", freelancers[0]);
    } else {
      console.log("‚ö†Ô∏è –ù—ç–≥ —á freelancer –æ–ª–¥—Å–æ–Ω–≥“Ø–π");
    }

    console.log("===== ‚úÖ GET /freelancer/nearby –¥—É—É—Å–ª–∞–∞ =====");
    return res.status(200).json({ success: true, data: freelancers });
  } catch (err) {
    console.error("‚ùå DB –∞–ª–¥–∞–∞:", err.message);
    return res.status(500).json({ success: false, message: err.message });
  }
});

exports.createOrder = asyncHandler(async (req, res) => {
  console.log("===== üì¶ CREATE ORDER —ç—Ö—ç–ª–ª—ç—ç =====");
  console.log("üëâ req.userId:", req.userId);
  console.log("üëâ req.body:", req.body);

  let { serviceId, freelancerId, address, lat, lng, price } = req.body;

  if (!Array.isArray(serviceId)) serviceId = [serviceId].filter(Boolean);
  console.log("üëâ Final serviceId array:", serviceId);

  const services = await Service.find({ _id: { $in: serviceId } });
  console.log(
    "üëâ –û–ª–¥—Å–æ–Ω services:",
    services.map((s) => s._id)
  );

  if (!services.length) {
    return res.status(404).json({
      success: false,
      message: "“Æ–π–ª—á–∏–ª–≥—ç—ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
    });
  }

  const order = await Order.create({
    user: req.userId,
    service: serviceId.length === 1 ? serviceId[0] : serviceId,
    address,
    lat: Number(lat),
    lng: Number(lng),
    price: Number(price) || 0,
    status: freelancerId ? "assigned" : "dispatching",
  });
  console.log("‚úÖ Order created:", order._id);

  // üîπ –®—É—É–¥ –æ–Ω–æ–æ—Ö (freelancerId –∏—Ä—Å—ç–Ω)
  if (freelancerId && mongoose.Types.ObjectId.isValid(freelancerId)) {
    console.log("üëâ Direct assign to freelancer:", freelancerId);

    order.freelancer = freelancerId;
    order.status = "assigned";
    await order.save();
    await order.populate("service", "service_name");

    const f = await Freelancer.findById(freelancerId);
    const token = f?.firebase_token;

    // üö© Direct assign “Ø–µ–¥ –æ–π—Ä—ã–Ω –∑–∞–π —Ç–æ–æ—Ü–æ—Ö (”©”©—Ä–∏–π–Ω—Ö –Ω—å –±–∞–π—Ä–ª–∞–ª—Ç–∞–π —Ö–∞—Ä—å—Ü—É—É–ª–∂)
    let distance = null;
    if (order.lat && order.lng && f?.location?.coordinates) {
      const [freelancerLng, freelancerLat] = f.location.coordinates;
      const R = 6371; // –¥—ç–ª—Ö–∏–π–Ω —Ä–∞–¥–∏—É—Å –∫–º
      const dLat = ((freelancerLat - order.lat) * Math.PI) / 180;
      const dLng = ((freelancerLng - order.lng) * Math.PI) / 180;
      const a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(order.lat * (Math.PI / 180)) *
          Math.cos(freelancerLat * (Math.PI / 180)) *
          Math.sin(dLng / 2) *
          Math.sin(dLng / 2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      distance = (R * c).toFixed(1); // –∫–º
    }

    // üîπ Customer info
    const customer = await Customer.findById(req.userId).select(
      "first_name last_name nickName phone"
    );

    if (token) {
      await sendFirebaseNotification({
        token,
        title: "–®–∏–Ω—ç –∑–∞—Ö–∏–∞–ª–≥–∞",
        body: "–¢–∞–Ω–¥ —à–∏–Ω—ç –∞–∂–∏–ª –∏—Ä–ª—ç—ç. –•“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö —É—É?",
        ttlSeconds: Math.ceil(DISPATCH_EXPIRES_MS / 1000),
        data: {
          type: "order_dispatch",
          orderId: order._id,
          service: Array.isArray(order.service)
            ? order.service.map((s) => s.service_name).join(", ")
            : order.service?.service_name ?? "---",
          action: "confirm",
          address: order.address,
          price: order.price,
          lat: order.lat,
          lng: order.lng,
          name: customer?.nickName
            ? customer.nickName
            : `${
                customer?.first_name ? customer.first_name.charAt(0) + "." : ""
              } ${customer?.last_name ?? ""}`,
          phone: customer?.phone ?? "",
          distance: distance ?? "---",
        },
      });

      await Notification.create({
        title: "–®–∏–Ω—ç –∑–∞—Ö–∏–∞–ª–≥–∞",
        body: "–¢–∞–Ω–¥ —à–∏–Ω—ç –∞–∂–∏–ª –∏—Ä–ª—ç—ç",
        data: { orderId: order._id, action: "confirm" },
        freelancerId,
      });
    }

    console.log("===== ‚úÖ CREATE ORDER –¥—É—É—Å–ª–∞–∞ (direct assign) =====");
    return res.status(201).json({ success: true, data: order });
  }

  // üîπ Broadcast ‚Äî –æ–π—Ä—ã–Ω N –æ–Ω–ª–∞–π–Ω
  const candidates = await Freelancer.aggregate([
    {
      $geoNear: {
        near: { type: "Point", coordinates: [order.lng, order.lat] },
        key: "location",
        distanceField: "dist",
        maxDistance: 7000,
        spherical: true,
        query: { online: true },
      },
    },
    { $sort: { dist: 1, rating_avg: -1 } },
    { $limit: DISPATCH_LIMIT },
    { $project: { _id: 1, dist: 1 } },
  ]);

  console.log("üëâ Candidates found:", candidates.length);

  if (!candidates.length) {
    const user = await Customer.findById(req.userId);
    const token = user?.firebase_token;
    if (token) {
      await sendFirebaseNotification({
        token,
        title: "–•–∞–π–ª—Ç –¥—É—É—Å–ª–∞–∞",
        body: "–û–π—Ä—Ö–æ–Ω –æ–Ω–ª–∞–π–Ω “Ø–π–ª—á–∏–ª–≥—ç—ç “Ø–∑“Ø“Ø–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π.",
        data: { type: "order_info", orderId: order._id, action: "no_provider" },
      });
    }
    return res
      .status(201)
      .json({ success: true, data: order, note: "no candidates" });
  }

  const fls = await Freelancer.find({
    _id: { $in: candidates.map((c) => c._id) },
  }).populate("user");

  const tokens = fls
    .map((f) => f?.user?.firebase_token || f?.firebase_token)
    .filter(Boolean);

  if (tokens.length) {
    await sendFirebaseNotification({
      token: tokens,
      title: "–û–π—Ä–æ–ª—Ü–æ–æ —à–∏–Ω—ç –∑–∞—Ö–∏–∞–ª–≥–∞",
      body: "–®–∏–Ω—ç –∞–∂–∏–ª –∏—Ä–ª—ç—ç. –•“Ø–ª—ç—ç–Ω –∞–≤–∞—Ö —É—É?",
      ttlSeconds: Math.ceil(DISPATCH_EXPIRES_MS / 1000),
      data: {
        type: "order_dispatch",
        orderId: order._id,
        action: "confirm",
        address: order.address,
        price: order.price,
        lat: order.lat,
        lng: order.lng,
      },
    });

    await Notification.create({
      title: "–û–π—Ä–æ–ª—Ü–æ–æ —à–∏–Ω—ç –∑–∞—Ö–∏–∞–ª–≥–∞",
      body: "Dispatch round #1",
      data: { orderId: order._id, action: "confirm" },
    });
  }

  // üîπ Re-dispatch setup
  if (dispatchTimers.has(String(order._id)))
    clearTimeout(dispatchTimers.get(String(order._id)));

  const t = setTimeout(async () => {
    try {
      const fresh = await Order.findById(order._id);
      if (!fresh || fresh.freelancer || fresh.status !== "dispatching") return;

      const more = await Freelancer.find({ online: true })
        .limit(DISPATCH_LIMIT * 2)
        .populate("user");

      const moreTokens = more
        .map((f) => f?.user?.firebase_token || f?.firebase_token)
        .filter(Boolean);

      if (moreTokens.length) {
        await sendFirebaseNotification({
          token: moreTokens,
          title: "–®–∏–Ω—ç –∑–∞—Ö–∏–∞–ª–≥–∞ (–¥–∞—Ö–∏–Ω —Ç“Ø–≥—ç—ç–ª—Ç)",
          body: "–®–∏–Ω—ç –∞–∂–∏–ª –±—ç–ª—ç–Ω –±–∞–π–Ω–∞. –•“Ø–ª—ç—ç–Ω –∞–≤–Ω–∞ —É—É?",
          ttlSeconds: Math.ceil(DISPATCH_EXPIRES_MS / 1000),
          data: {
            type: "order_dispatch",
            orderId: fresh._id,
            action: "confirm",
            address: fresh.address,
            price: fresh.price,
            lat: fresh.lat,
            lng: fresh.lng,
          },
        });
      }
    } catch (e) {
      console.error("‚ùå Re-dispatch error:", e.message);
    } finally {
      dispatchTimers.delete(String(order._id));
    }
  }, DISPATCH_EXPIRES_MS);

  dispatchTimers.set(String(order._id), t);

  console.log("===== ‚úÖ CREATE ORDER –¥—É—É—Å–ª–∞–∞ (broadcast) =====");
  return res.status(201).json({ success: true, data: order });
});

exports.assignProvider = asyncHandler(async (req, res) => {
  const { orderId } = req.params;
  const order = await Order.findById(orderId);
  if (!order)
    return res
      .status(404)
      .json({ success: false, message: "–ó–∞—Ö–∏–∞–ª–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });
  const provider = await Freelancer.findOne({ online: true }).sort({
    rating_avg: -1,
  });
  if (!provider)
    return res
      .status(400)
      .json({ success: false, message: "–û–Ω–ª–∞–π–Ω “Ø–π–ª—á–∏–ª–≥—ç—ç “Ø–∑“Ø“Ø–ª—ç–≥—á –±–∞–π—Ö–≥“Ø–π" });
  order.freelancer = provider._id;
  order.status = "assigned";
  await order.save();
  res.status(200).json({ success: true, data: order });
});
exports.acceptOrder = asyncHandler(async (req, res) => {
  const { orderId } = req.params;
  console.log("===== üü¢ ACCEPT ORDER —ç—Ö—ç–ª–ª—ç—ç =====");
  console.log("üëâ orderId:", orderId);
  console.log("üëâ freelancerId:", req.userId);

  try {
    // –∑”©–≤—Ö”©–Ω —Ö—ç–Ω —á –∞–≤–∞–∞–≥“Ø–π “Ø–µ–¥ ‚Äú–∞–Ω—Ö –∞–≤—Å–∞–Ω‚Äù-—ã–≥ —Ç—ç–º–¥—ç–≥–ª—ç–Ω—ç
    const updated = await Order.findOneAndUpdate(
      {
        _id: orderId,
        $or: [
          // dispatch “Ø–µ–¥ (freelancer —Ö–æ–æ—Å–æ–Ω)
          { freelancer: { $exists: false } },
          { freelancer: null },
          // direct assign “Ø–µ–¥ (freelancer = —ç–Ω—ç req.freelancerId)
          { freelancer: req.userId },
        ],
        status: { $in: ["dispatching", "assigned"] },
      },
      { $set: { freelancer: req.userId, status: "accepted" } },
      { new: true }
    ).populate("user service freelancer");

    if (!updated) {
      console.log(
        "‚ùå –ó–∞—Ö–∏–∞–ª–≥—ã–≥ ”©”©—Ä —Ö“Ø–Ω —Ç“Ø—Ä“Ø“Ø–ª–∂ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω —ç—Å–≤—ç–ª –±—É—Ä—É—É —Å—Ç–∞—Ç—É—Å"
      );
      return res.status(409).json({
        success: false,
        message: "”®”©—Ä —Ö“Ø–Ω —Ç“Ø—Ä“Ø“Ø–ª–∂ –±–∞—Ç–∞–ª–≥–∞–∞–∂—É—É–ª—Å–∞–Ω",
      });
    }

    console.log("‚úÖ –ó–∞—Ö–∏–∞–ª–≥–∞ –∞–º–∂–∏–ª—Ç—Ç–∞–π update —Ö–∏–π–≥–¥–ª—ç—ç:", updated._id);

    // ‚è± in-memory —Ç–∞–π–º–µ—Ä –±–∞–π–≤–∞–ª —Ü—É—Ü–∞–ª–Ω–∞
    const t = dispatchTimers.get(String(orderId));
    if (t) {
      clearTimeout(t);
      dispatchTimers.delete(String(orderId));
      console.log("üõë Dispatch —Ç–∞–π–º–µ—Ä —Ü—É—Ü–ª–∞–≥–¥–ª–∞–∞:", orderId);
    }

    // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–¥: ‚Äúaccepted‚Äù
    const user = await Customer.findById(updated.user);
    console.log("üëâ Target customer:", user?._id, user?.firebase_token);

    const userToken = user?.firebase_token;
    if (userToken) {
      console.log("üì© Sending FCM to customer:", userToken);
      await sendFirebaseNotification({
        token: userToken,
        title: "–ó–∞—Ö–∏–∞–ª–≥–∞ –±–∞—Ç–∞–ª–≥–∞–∞–∂–ª–∞–∞",
        body: "–¢–∞–Ω—ã –∑–∞—Ö–∏–∞–ª–≥—ã–≥ “Ø–π–ª—á–∏–ª–≥—ç—ç “Ø–∑“Ø“Ø–ª—ç–≥—á —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞.",
        data: {
          type: "order_update",
          orderId: updated._id,
          action: "accepted",
          freelancerId: req.userId,
        },
      });
      console.log("‚úÖ Notification sent to customer:", user._id);
    } else {
      console.log("‚ö†Ô∏è Customer-–¥ firebase_token –∞–ª–≥–∞:", user?._id);
    }

    console.log("===== ‚úÖ ACCEPT ORDER –¥—É—É—Å–ª–∞–∞ =====");
    return res.status(200).json({ success: true, data: updated });
  } catch (err) {
    console.error("‚ùå ACCEPT ORDER –∞–ª–¥–∞–∞:", err.message);
    return res.status(500).json({
      success: false,
      message: "–ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞",
      error: err.message,
    });
  }
});

exports.declineOrder = asyncHandler(async (req, res) => {
  const { orderId } = req.params;
  const order = await Order.findById(orderId);
  if (!order)
    return res
      .status(404)
      .json({ success: false, message: "–ó–∞—Ö–∏–∞–ª–≥–∞ –æ–ª–¥—Å–æ–Ω–≥“Ø–π" });
  order.status = "canceled";
  await order.save();
  res.status(200).json({ success: true, data: order });
});
exports.updateStatus = asyncHandler(async (req, res) => {
  const { orderId } = req.params;
  const { status } = req.body;
  const allowed = [
    "en_route",
    "started",
    "paid",
    "done",
    "completed",
    "canceled",
  ];
  if (!allowed.includes(status))
    return res.status(400).json({ success: false, message: "–°—Ç–∞—Ç—É—Å –±—É—Ä—É—É" });
  const order = await Order.findByIdAndUpdate(
    orderId,
    { status },
    { new: true }
  );
  res.status(200).json({ success: true, data: order });
});
exports.getMyOrders = asyncHandler(async (req, res) => {
  const orders = await Order.find({ user: req.userId })
    .sort({ createdAt: -1 })
    .populate("service freelancer");
  res.status(200).json({ success: true, data: orders });
});

exports.getAllModel = asyncHandler(async (req, res, next) => {
  try {
    const result = await Order.find();

    customResponse.success(res, result);
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.getOrderByIds = asyncHandler(async (req, res) => {
  try {
    const { orderId } = req.params;


    const orders = await Order.find({
      _id: { $in: orderId },
    })

    orders.forEach((o) => {});

    return res.status(200).json({
      success: true,
      count: orders.length,
      data: orders,
    });
  } catch (error) {
    console.error("‚ùå [getOrderByIds] Error:", error.message);
    customResponse.error(res, error.message);
  }
});

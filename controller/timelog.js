const TimeLog = require("../models/timelog");
const Company = require("../models/company");
const asyncHandler = require("../middleware/asyncHandler");
const customResponse = require("../utils/customResponse");

// ‚úÖ utils –∏–º–ø–æ—Ä—Ç
const {
  calculateDistance,
  updateDailySummary,
} = require("../utils/attendanceUtils");

// üü¢ –ò—Ä—ç—Ö (Clock In)
exports.clockIn = asyncHandler(async (req, res, next) => {
  try {
    console.log("üì• [ClockIn] Request body:", req.body);

    const artistId = req.userId;
    const { companyId, lat, lng } = req.body;

    console.log("üë§ Artist ID:", artistId);
    console.log("üè¢ Company ID:", companyId);
    console.log("üìç Location:", { lat, lng });

    // –ö–æ–º–ø–∞–Ω–∏–π–≥ —à–∞–ª–≥–∞—Ö
    const company = await Company.findById(companyId);
    if (!company) {
      console.log("‚ùå –ö–æ–º–ø–∞–Ω–∏ –æ–ª–¥—Å–æ–Ω–≥“Ø–π:", companyId);
      return customResponse.error(res, "–ö–æ–º–ø–∞–Ω–∏ –æ–ª–¥—Å–æ–Ω–≥“Ø–π");
    }
    console.log("‚úÖ Company found:", company.name);

    // –ë–∞–π—Ä—à–ª—ã–Ω —à–∞–ª–≥–∞–ª—Ç
    const distance = calculateDistance(
      lat,
      lng,
      parseFloat(company.latitude),
      parseFloat(company.longitude)
    );
    console.log(`üìè Distance to company: ${distance.toFixed(2)}m`);

    if (distance > 100) {
      console.log("‚ùå –•—ç—Ç —Ö–æ–ª –±–∞–π–Ω–∞ (>100–º)");
      return customResponse.error(
        res,
        "–¢–∞ –∫–æ–º–ø–∞–Ω–∏–π–Ω –±–∞–π—Ä—à–ª–∞–∞—Å 100–º –¥–æ—Ç–æ—Ä –±–∞–π—Ö —ë—Å—Ç–æ–π!"
      );
    }

    const log = await TimeLog.create({
      artistId,
      companyId,
      type: "clockIn",
      location: { lat, lng },
    });
    console.log("‚úÖ TimeLog created (clockIn):", log);

    const summary = await updateDailySummary(artistId, companyId);
    console.log("üíæ DailyWorkSummary updated:", summary);

    return customResponse.success(res, log, "–ò—Ä—Å—ç–Ω —Ü–∞–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç");
  } catch (error) {
    console.error("‚ùå ClockIn error:", error);
    customResponse.error(res, error.message);
  }
});

// üü¢ –Ø–≤–∞—Ö (Clock Out)
exports.clockOut = asyncHandler(async (req, res, next) => {
  try {
    console.log("üì• [ClockOut] Request body:", req.body);

    const artistId = req.userId;
    const { companyId, lat, lng } = req.body;

    console.log("üë§ Artist ID:", artistId);
    console.log("üè¢ Company ID:", companyId);
    console.log("üìç Location:", { lat, lng });

    // –ö–æ–º–ø–∞–Ω–∏–π–≥ —à–∞–ª–≥–∞—Ö
    const company = await Company.findById(companyId);
    if (!company) {
      console.log("‚ùå –ö–æ–º–ø–∞–Ω–∏ –æ–ª–¥—Å–æ–Ω–≥“Ø–π:", companyId);
      return customResponse.error(res, "–ö–æ–º–ø–∞–Ω–∏ –æ–ª–¥—Å–æ–Ω–≥“Ø–π");
    }
    console.log("‚úÖ Company found:", company.name);

    // –ë–∞–π—Ä—à–ª—ã–Ω —à–∞–ª–≥–∞–ª—Ç
    const distance = calculateDistance(
      lat,
      lng,
      parseFloat(company.latitude),
      parseFloat(company.longitude)
    );
    console.log(`üìè Distance to company: ${distance.toFixed(2)}m`);

    if (distance > 100) {
      console.log("‚ùå –•—ç—Ç —Ö–æ–ª –±–∞–π–Ω–∞ (>100–º)");
      return customResponse.error(
        res,
        "–¢–∞ –∫–æ–º–ø–∞–Ω–∏–π–Ω –±–∞–π—Ä—à–ª–∞–∞—Å 100–º –¥–æ—Ç–æ—Ä –±–∞–π—Ö —ë—Å—Ç–æ–π!"
      );
    }

    const log = await TimeLog.create({
      artistId,
      companyId,
      type: "clockOut",
      location: { lat, lng },
    });
    console.log("‚úÖ TimeLog created (clockOut):", log);

    const summary = await updateDailySummary(artistId, companyId);
    console.log("üíæ DailyWorkSummary updated:", summary);

    return customResponse.success(res, log, "–Ø–≤—Å–∞–Ω —Ü–∞–≥ –∞–º–∂–∏–ª—Ç—Ç–∞–π –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç");
  } catch (error) {
    console.error("‚ùå ClockOut error:", error);
    customResponse.error(res, error.message);
  }
});

// üü¢ –ë“Ø—Ö –ª–æ–≥ –∞–≤–∞—Ö
exports.getAll = asyncHandler(async (req, res, next) => {
  try {
    console.log("üì• [getAll] Request received");

    const data = await TimeLog.find();
    console.log(`üìä Retrieved ${data.length} TimeLogs`);

    customResponse.success(res, data);
  } catch (error) {
    console.error("‚ùå getAll error:", error);
    customResponse.error(res, error.message);
  }
});

// üü¢ ”®–¥—Ä–∏–π–Ω —Ç–∞–π–ª–∞–Ω –∞–≤–∞—Ö
exports.getDailyLogs = asyncHandler(async (req, res, next) => {
  try {
    const artistId = req.userId;
    const { date } = req.query;
    const targetDate = date ? new Date(date) : new Date();

    console.log("üì• [getDailyLogs] artistId:", artistId, "date:", targetDate);

    const result = await updateDailySummary(artistId, null, targetDate);

    console.log("üìä DailyLogs result:", result);

    return customResponse.success(res, result);
  } catch (error) {
    console.error("‚ùå getDailyLogs error:", error);
    customResponse.error(res, error.message);
  }
});

// ‚è∞ –ö–æ–º–ø–∞–Ω–∏–π–Ω –±“Ø—Ö –∞–∂–∏–ª—á–¥—ã–Ω —Ç—É—Ö–∞–π–Ω ”©–¥—Ä–∏–π–Ω —Ç–∞–π–ª–∞–Ω
exports.getCompanyDailyLogs = asyncHandler(async (req, res, next) => {
  try {
    const { companyId, date } = req.query;
    if (!companyId) {
      return customResponse.error(res, "companyId —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π");
    }

    const targetDate = date ? new Date(date) : new Date();
    const startOfDay = new Date(
      targetDate.getFullYear(),
      targetDate.getMonth(),
      targetDate.getDate(),
      0,
      0,
      0
    );
    const endOfDay = new Date(
      targetDate.getFullYear(),
      targetDate.getMonth(),
      targetDate.getDate(),
      23,
      59,
      59
    );

    // —Ç—É—Ö–∞–π–Ω –∫–æ–º–ø–∞–Ω–∏–π–Ω –±“Ø—Ö –ª–æ–≥–∏–π–≥ –∞–≤–Ω–∞
    const logs = await TimeLog.find({
      companyId,
      createdAt: { $gte: startOfDay, $lte: endOfDay },
    })
      .populate("artistId", "first_name last_name phone")
      .sort({ createdAt: 1 });

    // –∞–∂–∏–ª—Ç–∞–Ω –±“Ø—Ä—ç—ç—Ä –Ω—å –±“Ø–ª—ç–≥–ª—ç–Ω—ç
    const grouped = {};
    logs.forEach((log) => {
      const artist = log.artistId;
      if (!artist) return;

      if (!grouped[artist._id]) {
        grouped[artist._id] = {
          artistId: artist._id,
          artistName: `${artist.first_name} ${artist.last_name}`,
          phone: artist.phone,
          sessions: [],
          totalMinutes: 0,
          currentIn: null,
        };
      }

      if (log.type === "clockIn") {
        grouped[artist._id].currentIn = log.createdAt;
      }

      if (log.type === "clockOut" && grouped[artist._id].currentIn) {
        const workedMinutes = Math.round(
          (log.createdAt - grouped[artist._id].currentIn) / 1000 / 60
        );
        grouped[artist._id].sessions.push({
          in: grouped[artist._id].currentIn,
          out: log.createdAt,
          workedMinutes,
        });
        grouped[artist._id].totalMinutes += workedMinutes;
        grouped[artist._id].currentIn = null;
      }
    });

    const result = Object.values(grouped);

    // üü¢ Log —Ö—ç–≤–ª—ç—Ö —Ö—ç—Å—ç–≥
    console.log("üìä Company Daily Logs:", JSON.stringify(result, null, 2));

    return customResponse.success(res, result, "–ö–æ–º–ø–∞–Ω–∏–π–Ω ”©–¥”©—Ä —Ç—É—Ç–º—ã–Ω —Ç–∞–π–ª–∞–Ω");
  } catch (error) {
    console.error("‚ùå getCompanyDailyLogs error:", error);
    customResponse.error(res, error.message);
  }
});

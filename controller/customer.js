const User = require("../models/customer");
const Appointment = require("../models/appointment");
const asyncHandler = require("../middleware/asyncHandler");
const jwt = require("jsonwebtoken");
const sendMessage = require("../utils/callpro");
const { sendEmail } = require("../utils/mailService");

const customResponse = require("../utils/customResponse");
const OTP = require("../models/otp");
const Artist = require("../models/artist");
const Company = require("../models/company");
const customer = require("../models/customer");

function generateOTP(length = 4) {
  let otp = "";
  const characters = "0123456789";

  for (let i = 0; i < length; i++) {
    otp += characters[Math.floor(Math.random() * characters.length)];
  }

  return otp;
}

const validatePhone = async (phone) => {
  const user = await User.findOne({ phone }).select("+pin");
  return user ? true : false;
};

const validateEmail = async (email) => {
  const user = await User.findOne({ email }).select("+pin");
  return user ? true : false;
};

// Exports
exports.validatePhone = asyncHandler(async (req, res) => {
  const { phone } = req.body;

  if (!phone) {
    return customResponse.error(res, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä–∞–∞ –æ—Ä—É—É–ª–Ω–∞ —É—É");
  }

  const userExists = await validatePhone(phone);

  if (!userExists) {
    return customResponse.error(res, "–£—Ç–∞—Å –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞");
  }

  return res.status(200).json({ success: true });
});

exports.getOtpAgain = asyncHandler(async (req, res, next) => {
  try {
    const otp = generateOTP();
    const { phone } = req.body;
    const dat = await User.findOne({
      phone,
    });

    const p = await OTP.findOne({
      customer: dat._id.toString(),
    });

    if (p) {
      await OTP.findOneAndUpdate(
        {
          customer: dat._id.toString(),
        },

        {
          otp,
          // customer: user._id,
        }
      );
    } else {
      await OTP.create({
        otp,
        customer: dat._id.toString(),
        // customer: user._id,
      });
    }

    await sendMessage(phone, `–¢–∞–Ω—ã –Ω—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥: ${otp}`);

    res.status(200).json({
      success: true,
    });
  } catch (error) {
    console.log(error);
    customResponse.server(res, error.message);
  }
});

exports.validateEmail = asyncHandler(async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return customResponse.error(res, "–¶–∞—Ö–∏–º —Ö–∞—è–≥–∞–∞ –æ—Ä—É—É–ª–Ω–∞ —É—É");
  }

  const userExists = await validateEmail(email);

  if (!userExists) {
    return customResponse.error(res, "–¶–∞—Ö–∏–º —Ö–∞—è–≥ –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞");
  }

  return res.status(200).json({ success: true });
});

exports.getAll = asyncHandler(async (req, res, next) => {
  try {
    const allUser = await User.find();
    const total = await User.countDocuments();
    res.status(200).json({
      success: true,
      count: total,
      data: allUser,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.getCustomerAppointments = asyncHandler(async (req, res) => {
  console.log("üì• [getCustomerAppointments] Called by user:", req.userId);

  try {
    // 1Ô∏è‚É£ Appointment —Ö–∞–π–∂ —Ç–∞—Ç–∞—Ö + schedule ‚Üí service ‚Üí company, artist-–∏–π–≥ populate —Ö–∏–π—Ö
    console.log("üîé [1] Fetching appointments for user:", req.userId);
    const allAppointments = await Appointment.find({
      user: req.userId,
      status: { $in: ["paid", "done", "completed", "pending"] },
    })
      .populate({
        path: "schedule",
        populate: [
          { path: "serviceId" },
          { path: "artistId" },
          { path: "companyId" }, // Schedule ‚Üí company
        ],
      })
      .populate("company"); // Appointment ‚Üí company

    // 3Ô∏è‚É£ –≠—Ü—Å–∏–π–Ω “Ø—Ä –¥“Ø–Ω–≥ –±—É—Ü–∞–∞—Ö
    res.status(200).json({
      success: true,
      data: allAppointments,
    });
    console.log("‚úÖ [3] Response sent successfully");
  } catch (error) {
    console.error("‚ùå [ERROR] getCustomerAppointments:", error.message);
    customResponse.error(res, error.message);
  }
});

exports.getMe = asyncHandler(async (req, res, next) => {
  try {
    if (!req.headers.authorization) {
      return res.status(200).json({
        success: false,
        message: "–¢–∞ —ç—Ö–ª—ç—ç–¥ –Ω—ç–≤—Ç—Ä—ç–Ω—ç “Ø“Ø",
      });
    }
    const token = req.headers.authorization.split(" ")[1];
    if (!token) {
      return res.status(200).json({
        success: false,
        message: "–¢–æ–∫–µ–Ω —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞",
      });
    }
    const tokenObj = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(tokenObj.Id);
    const tokens = user.getJsonWebToken();
    if (!user) {
      return res.status(404).json({
        success: false,
        message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
      });
    }
    console.log(user);
    console.log(tokens);
    return res.status(200).json({
      success: true,
      data: user,
      token: tokens,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.customerUpdateTheirOwnInformation = asyncHandler(
  async (req, res, next) => {
    try {
      if (req.userId != req.params.id) {
        return res.status(200).json({
          success: false,
          msg: "–¢–∞ –∑”©–≤—Ö”©–Ω ”©”©—Ä–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ ”©”©—Ä—á–ª”©–∂ –±–æ–ª–Ω–æ",
        });
      }
      const old = await User.findById(req.params.id);
      const data = await User.findByIdAndUpdate(req.params.id, {
        ...req.body,
        photo: req.file ? req.file.filename : old.photo,
      });
      const token = old.getJsonWebToken();
      return res.status(200).json({
        success: true,
        data,
        token,
      });
    } catch (error) {
      customResponse.error(res, error.message);
    }
  }
);

exports.registerWithPhone = asyncHandler(async (req, res) => {
  const session = await User.startSession();
  session.startTransaction();
  try {
    const { pin, phone } = req.body;

    const existingUser = await User.findOne({ phone }).session(session);
    if (existingUser) {
      await session.abortTransaction();
      return res.status(400).json({
        success: false,
        message: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞",
      });
    }

    const inputData = {
      ...req.body,
      photo: req.file ? req.file.filename : "no-img.png",
    };

    const user = await User.create([inputData], { session });
    const otp = generateOTP();

    await OTP.create(
      [
        {
          otp,
          customer: user[0]._id,
        },
      ],
      { session }
    );

    // üü¢ –≠–Ω–¥ SMS –∏–ª–≥—ç—ç–Ω—ç:
    try {
      await sendMessage(phone, `–¢–∞–Ω—ã –Ω—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥: ${otp}`);
    } catch (smsError) {
      // SMS –∞–º–∂–∏–ª—Ç–≥“Ø–π –±–æ–ª —Ö—ç—Ä—ç–≥–ª—ç–≥—á, OTP-–≥ —É—Å—Ç–≥–∞–∂ transaction-–≥ –±–æ–ª–∏—É–ª–Ω–∞
      await session.abortTransaction();
      session.endSession();
      console.error("OTP –∏–ª–≥—ç—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", smsError.message);
      return res.status(500).json({
        success: false,
        message: "OTP –∏–ª–≥—ç—ç—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –ë“Ø—Ä—Ç–≥—ç–ª —Ö–∏–π–≥–¥—Å—ç–Ω–≥“Ø–π.",
      });
    }

    await session.commitTransaction();
    session.endSession();

    return res.status(200).json({
      success: true,
      message: "–ë“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π. –ù—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥ –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç.",
    });
  } catch (error) {
    await session.abortTransaction();
    session.endSession();
    console.error(error);
    customResponse.error(res, error.message);
  }
});

exports.register = asyncHandler(async (req, res, next) => {
  try {
    if (!req.body.pin) {
      customResponse.error(res, "–¢–∞ –ø–∏–Ω –æ—Ä—É—É–ª–∂ ”©–≥–Ω”© “Ø“Ø ");
    }
    const existingUser = await User.findOne({ phone: req.body.phone });
    const exinstingEmail = await User.findOne({ email: req.body.email });

    if (existingUser) {
      return res.status(200).json({
        success: false,
        message: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞",
      });
    }
    if (exinstingEmail) {
      return res.status(200).json({
        success: false,
        message: "–ò-–º—ç–π–ª –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞",
      });
    }

    const inputData = {
      ...req.body,
      photo: req.file?.filename ? req.file.filename : "no user photo",
    };

    const user = await User.create(inputData);
    const token = user.getJsonWebToken();

    customResponse.success(res, "–ê–º–∂–∏–ª—Ç—Ç–∞–π —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç");
  } catch (error) {
    console.log(error);
    customResponse.error(res, error.message);
  }
});

exports.registerWithEmail = asyncHandler(async (req, res, next) => {
  try {
    const { pin, email } = req.body;

    if (!pin) {
      return res.status(200).json({
        success: false,
        message: "PIN –∫–æ–¥–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É",
      });
    }
    let existingUser = await User.findOne({ email });

    if (existingUser) {
      res.status(400).json({
        success: false,
        message: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞",
      });
    }

    const inputData = {
      ...req.body,
      photo: req.file ? req.file.filename : "no-img.png",
    };

    const user = await User.create(inputData);

    const otp = generateOTP();
    if (existingUser) {
      await OTP.findByIdAndUpdate(
        {
          customer: user._id,
        },
        {
          otp,
          customer: user._id,
        }
      );
    } else {
      await OTP.create({
        otp,
        customer: user._id,
      });
    }

    await sendEmail(email, email, otp);

    // await sendMessage(phone, `–¢–∞–Ω—ã –Ω—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥: ${otp}`);

    return res.status(200).json({
      success: true,
      message: "–ë“Ø—Ä—Ç–≥—ç–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π. –ù—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥ –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç",
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

// OTP verification endpoint
exports.registerVerify = asyncHandler(async (req, res, next) => {
  try {
    const { otp, phone, email, isEmail, count, pin } = req.body;

    if (Number(count) < 3) {
      res.status(400).json({
        success: false,
        message: "–¢–∞ —Ç“Ø—Ä —Ö“Ø–ª—ç—ç–Ω –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É",
      });
    }

    let existingUser;

    if (isEmail && email) {
      existingUser = await User.findOneAndUpdate({ email }, { pin });

      if (!existingUser) {
        return res.status(200).json({
          success: false,
          message: "–¶–∞—Ö–∏–º —Ö–∞—è–≥ –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞",
        });
      }
    } else {
      existingUser = await User.findOneAndUpdate(
        { phone },
        {
          pin,
        }
      );

      if (!existingUser) {
        return res.status(200).json({
          success: false,
          message: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞",
        });
      }
    }

    const userOtp = await OTP.findOne({
      customer: existingUser._id,
    });

    if (!userOtp) {
      return res.status(200).json({
        success: false,
        message: "OTP not found. Please request a new one.",
      });
    }

    // Correct OTP comparison
    if (otp !== userOtp.otp) {
      return res.status(200).json({
        success: false,
        message: "–ë—É—Ä—É—É –Ω—ç–≥ —É–¥–∞–∞–≥–∏–π–Ω –Ω—É—É—Ü “Ø–≥",
      });
    }

    existingUser.status = true;
    await existingUser.save();

    // If OTP is correct, generate JWT token
    const token = existingUser.getJsonWebToken();

    // Optionally, delete the OTP after successful verification
    await OTP.deleteOne({ customer: existingUser._id });

    return res.status(200).json({
      success: true,
      token,
      data: existingUser,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.forgotPassword = asyncHandler(async (req, res) => {
  const { phone, isEmail, email } = req.body;
  let user;
  if (isEmail) {
    user = await User.findOne({ email });
  } else {
    user = await User.findOne({ phone });
  }

  if (!user) {
    return res.status(404).json({
      success: false,
      message: "–•—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π —ç—Å–≤—ç–ª –º—ç–¥—ç—ç–ª—ç–ª –±—É—Ä—É—É –±–∞–π–Ω–∞.",
    });
  }
  const otp = generateOTP();

  try {
    user.pin = otp;
    await user.save();
  } catch (error) {
    return res.status(500).json({
      success: false,
      message: "–•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º—ç–¥—ç—ç–ª–ª–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.",
    });
  }

  try {
    if (isEmail) {
      await sendEmail(
        email,
        "Forgot Password OTP",
        `–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥ ${otp} –±–æ–ª–∂ —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.`
      );
    } else {
      await sendMessage(phone, `–¢–∞–Ω—ã –Ω—É—É—Ü “Ø–≥ ${otp} –±–æ–ª–∂ —à–∏–Ω—ç—á–ª—ç–≥–¥–ª—ç—ç.`);
    }
  } catch (error) {
    console.error("Error sending OTP:", error.message);
    return res.status(500).json({
      success: false,
      message: "OTP –∏–ª–≥—ç—ç—Ö —è–≤—Ü–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.",
    });
  }

  return res.status(200).json({
    success: true,
    message: `–ê–º–∂–∏–ª—Ç—Ç–∞–π. –¢–∞–Ω—ã —à–∏–Ω—ç –Ω—É—É—Ü “Ø–≥ –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π ${
      isEmail ? "email-—Ä—É—É" : "—É—Ç–∞—Å —Ä—É—É"
    } –∏–ª–≥—ç—ç–≥–¥–ª—ç—ç.`,
  });
});

exports.loginWithPhone = asyncHandler(async (req, res, next) => {
  try {
    const { phone, pin } = req.body;

    // Validate input
    if (!phone || !pin) {
      return res.status(200).json({
        success: false,
        message: "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±–æ–ª–æ–Ω PIN –∫–æ–¥–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É",
      });
    }

    // Find user or artist by phone
    const user = await User.findOne({ phone }).select("+pin");

    // await User.findOneAndUpdate(
    //   { phone },
    //   {
    //     pin: "2211",
    //   }
    // );

    if (!user) {
      return customResponse.error(res, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞");
    }

    // Authenticate user

    const isMatch = await user.checkPassword(pin);
    if (!isMatch) {
      return customResponse.error(res, "–ù—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞!");
    }

    const token = user.getJsonWebToken();
    return res.status(200).json({
      success: true,
      isArtist: false,
      token,
      data: user,
    });
  } catch (error) {
    console.log(error);
    return customResponse.error(res, error.message);
  }
});

exports.loginWithEmail = asyncHandler(async (req, res, next) => {
  try {
    const { email, pin } = req.body;

    // Validate input
    if (!email || !pin) {
      return customResponse.error(res, "–ò–º–µ–π–ª –±–æ–ª–æ–Ω PIN –∫–æ–¥–æ–æ –æ—Ä—É—É–ª–Ω–∞ —É—É");
    }

    // Find user or artist by email
    const user = await User.findOne({ email }).select("+pin");
    const artist = await Artist.findOne({ email }).select("+pin");

    if (!user && !artist) {
      return customResponse.error(res, "–ò–º–µ–π–ª –±“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π –±–∞–π–Ω–∞");
    }

    // Authenticate artist
    if (artist) {
      const isMatch = await artist.checkPassword(pin);
      if (!isMatch) {
        return customResponse.error(
          res,
          "–ù—ç–≤—Ç—Ä—ç—Ö –Ω—ç—Ä —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞!"
        );
      }

      const token = artist.getJsonWebToken();
      return res.status(200).json({
        success: true,
        isArtist: true,
        token,
        data: artist,
      });
    }

    // Authenticate user
    if (user) {
      const isMatch = await user.checkPassword(pin);
      if (!isMatch) {
        return customResponse.error(
          res,
          "–ù—ç–≤—Ç—Ä—ç—Ö –Ω—ç—Ä —ç—Å–≤—ç–ª –Ω—É—É—Ü “Ø–≥ –±—É—Ä—É—É –±–∞–π–Ω–∞!"
        );
      }

      const token = user.getJsonWebToken();
      return res.status(200).json({
        success: true,
        isArtist: false,
        token,
        data: user,
      });
    }
  } catch (error) {
    return customResponse.error(res, error.message);
  }
});

exports.updateUserFCM = asyncHandler(async (req, res, next) => {
  try {
    const { token, isAndroid } = req.body;

    console.log(req.userId);

    const userFind = await User.findById(req.userId);

    const artistFind = await Artist.findById(req.userId);
    console.log(userFind);

    if (!userFind && !artistFind) {
      return res.status(400).json({
        success: false,
        message: "–ë“Ø—Ä—Ç–≥—ç–ª–≥“Ø–π",
      });
    }

    if (userFind) {
      userFind.firebase_token = token;
      userFind.isAndroid = isAndroid;
      await userFind.save();
    }
    if (artistFind) {
      artistFind.firebase_token = token;
      artistFind.isAndroid = isAndroid;
      await artistFind.save();
    }
    res.status(200).json({
      success: true,
    });
  } catch (error) {
    console.log(error);
    customResponse.error(res, error.message);
  }
});

exports.update = asyncHandler(async (req, res, next) => {
  try {
    const old = await User.findById(req.params.id);
    const updatedData = {
      ...req.body,
      photo: req.file ? req.file.filename : old.photo,
    };

    const upDateUserData = await User.findByIdAndUpdate(
      req.params.id,
      updatedData,
      {
        new: true,
      }
    );
    return res.status(200).json({
      success: true,
      data: upDateUserData,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.get = asyncHandler(async (req, res, next) => {
  try {
    const allText = await User.findById(req.params.id);
    return res.status(200).json({
      success: true,
      data: allText,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

exports.deleteModel = asyncHandler(async (req, res, next) => {
  try {
    const deletePost = await User.findByIdAndDelete(req.params.id, {
      new: true,
    });
    return res.status(200).json({
      success: true,
      msg: "–ê–∂–∏–ª—Ç—Ç–∞–π —É—Å–≥–∞–≥–¥–ª–∞–∞",
      data: deletePost,
    });
  } catch (error) {
    customResponse.error(res, error.message);
  }
});

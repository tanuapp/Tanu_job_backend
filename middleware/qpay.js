const axios = require("axios");

let cachedToken = null;
let cachedUntil = null;

/**
 * QPay access token –∞–≤–∞—Ö, 1 —Ü–∞–≥–∏–π–Ω —Ö—É–≥–∞—Ü–∞–∞—Ç–∞–π –∫—ç—à–ª—ç–Ω—ç
 */
const makeRequest = async () => {
  const now = Date.now();

  // ‚úÖ –•—ç—Ä–≤—ç—ç ”©–º–Ω”© –Ω—å –∞–≤—Å–∞–Ω token —Ö“Ø—á–∏–Ω—Ç—ç–π –±–∞–π–≤–∞–ª —à—É—É–¥ –±—É—Ü–∞–∞–Ω–∞
  if (cachedToken && cachedUntil && now < cachedUntil) {
    return { access_token: cachedToken };
  }

  try {
    const session_url = process.env.qpayUrl + "auth/token";

    const response = await axios.post(
      session_url,
      {},
      {
        auth: {
          username: process.env.QpayUserName,
          password: process.env.QpayPassword,
        },
      }
    );

    if (response.status === 200 && response.data.access_token) {
      cachedToken = response.data.access_token;
      cachedUntil = now + 55 * 60 * 1000; // 55 –º–∏–Ω—É—Ç cache-–ª—ç—Å—ç–Ω token –∞—à–∏–≥–ª–∞–Ω–∞
      console.log("‚úÖ QPay token –∞–≤–ª–∞–∞:", cachedToken.slice(0, 15) + "...");

      return { access_token: cachedToken };
    } else {
      throw new Error("QPay access_token –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞");
    }
  } catch (err) {
    console.error("‚ùå QPay Token Error:", err.response?.data || err.message);
    return { access_token: null };
  }
};

// üß™ Deprecated old function (—É—Å—Ç–≥–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π)
const token = () => {
  console.warn(
    "‚ö†Ô∏è [token()] –Ω—å –∞—à–∏–≥–ª–∞–≥–¥–∞—Ö–≥“Ø–π, –æ—Ä–æ–Ω–¥ –Ω—å makeRequest() —Ö—ç—Ä—ç–≥–ª—ç!"
  );
  return makeRequest();
};

module.exports = { token, makeRequest };

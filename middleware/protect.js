const jwt = require("jsonwebtoken");
const asyncHandler = require("./asyncHandler");

// ‚úÖ Authentication middleware
exports.protect = asyncHandler(async (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({
      success: false,
      msg: "–¢–∞ —ç—Ö–ª—ç—ç–¥ –Ω—ç–≤—Ç—Ä—ç–Ω—ç “Ø“Ø (Bearer —Ç–æ–∫–µ–Ω –¥–∞–º–∂—É—É–ª–Ω–∞ —É—É).",
    });
  }

  const token = authHeader.split(" ")[1];
  if (!token) {
    return res.status(401).json({
      success: false,
      msg: "–¢–æ–∫–µ–Ω —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞.",
    });
  }

  try {
    const tokenObj = jwt.verify(token, process.env.JWT_SECRET);

    // üü¢ JWT-–∞–∞—Å –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–Ω–∞
    req.token = token;
    req.userId = tokenObj.Id;
    req.userRole = tokenObj.role;
    req.companyId = tokenObj.companyId || null;

    next();
  } catch (error) {
    console.error("JWT verify error:", error.message);
    return res.status(401).json({
      success: false,
      msg:
        error.name === "TokenExpiredError"
          ? "–¢–æ–∫–µ–Ω—ã —Ö—É–≥–∞—Ü–∞–∞ –¥—É—É—Å—Å–∞–Ω –±–∞–π–Ω–∞."
          : "–¢–æ–∫–µ–Ω –±—É—Ä—É—É –±–∞–π–Ω–∞.",
    });
  }
});

// ‚úÖ Role-based authorization
exports.authorize = (roles) => {
  return (req, res, next) => {
    if (!req.userRole) {
      return res.status(401).json({
        success: false,
        msg: "–¢–∞–Ω—ã —Ç–æ–∫–µ–Ω–¥ role –º—ç–¥—ç—ç–ª—ç–ª –±–∞–π—Ö–≥“Ø–π –±–∞–π–Ω–∞.",
      });
    }

    if (!roles.includes(req.userRole.toString())) {
      return res.status(403).json({
        success: false,
        msg: `–≠–Ω—ç “Ø–π–ª–¥–ª–∏–π–≥ —Ö–∏–π—Ö —ç—Ä—Ö —Ö“Ø—Ä—ç–ª—Ü—ç—Ö–≥“Ø–π –±–∞–π–Ω–∞. –¢–∞–Ω—ã role: [${req.userRole}]`,
      });
    }

    next();
  };
};

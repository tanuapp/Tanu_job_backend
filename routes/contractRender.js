const express = require("express");
const router = express.Router();
const puppeteer = require("puppeteer");
const fs = require("fs").promises;
const path = require("path");
const asyncHandler = require("../middleware/asyncHandler");

router.post(
  "/render-pdf",
  asyncHandler(async (req, res) => {
    const { html: base64Html, meta } = req.body;

    console.log("üöÄ [PDF RENDER] –®–∏–Ω—ç —Ö“Ø—Å—ç–ª—Ç –∏—Ä–ª—ç—ç");
    console.log("‚û°Ô∏è [PDF RENDER] Meta:", JSON.stringify(meta, null, 2));

    if (!base64Html) {
      console.error("‚ùå [PDF RENDER] HTML ”©–≥”©–≥–¥”©–ª –∏—Ä—ç—ç–≥“Ø–π");
      return res.status(400).json({ error: "HTML ”©–≥”©–≥–¥”©–ª —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π" });
    }

    let html;
    try {
      html = Buffer.from(base64Html, "base64").toString("utf-8");
      console.log(
        "‚úÖ [PDF RENDER] HTML –∞–º–∂–∏–ª—Ç—Ç–∞–π decode —Ö–∏–π–ª—ç—ç, —É—Ä—Ç:",
        html.length
      );

      console.log(
        "‚úÖ [PDF RENDER] HTML –∞–º–∂–∏–ª—Ç—Ç–∞–π decode —Ö–∏–π–ª—ç—ç, —É—Ä—Ç:",
        html.length
      );
    } catch (decodeErr) {
      console.error("‚ùå [PDF RENDER] HTML decode —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞:", decodeErr);
      return res
        .status(500)
        .json({ success: false, error: "HTML decode —Ö–∏–π—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞" });
    }

    try {
      console.log("üöÄ [PDF RENDER] Puppeteer —ç—Ö—ç–ª–∂ –±–∞–π–Ω–∞...");
      const browser = await puppeteer.launch({
        headless: "new",
        args: ["--no-sandbox"],
      });
      const page = await browser.newPage();

      console.log("üìÑ [PDF RENDER] HTML –∞—á–∞–∞–ª–∂ –±–∞–π–Ω–∞...");
      await page.setContent(html, { waitUntil: "networkidle0" });
      console.log("‚úÖ [PDF RENDER] HTML –∞—á–∞–∞–≥–¥–ª–∞–∞!");

      console.log("üñ®Ô∏è [PDF RENDER] PDF “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...");
      const pdfBuffer = await page.pdf({
        format: "A4",
        printBackground: true,
        margin: { top: "20mm", bottom: "20mm", left: "15mm", right: "15mm" },
      });
      await browser.close();
      console.log("‚úÖ [PDF RENDER] PDF “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç!");

      const sanitizeFilename = (name) => {
        return name.replace(/[^a-zA-Z0-9-_]/g, "_"); // –∑”©–≤—à”©”©—Ä”©–≥–¥—Å”©–Ω —Ç—ç–º–¥—ç–≥—Ç“Ø“Ø–¥
      };

      const contractNumber = sanitizeFilename(
        meta?.contractNumber || Date.now().toString()
      );
      const filename = `contract-${contractNumber}.pdf`;

      const filePath = path.join(__dirname, "../public/uploads", filename);

      console.log("üíæ [PDF RENDER] –§–∞–π–ª—ã–≥ —Ö–∞–¥–≥–∞–ª–∂ –±–∞–π–Ω–∞:", filePath);
      await fs.mkdir(path.dirname(filePath), { recursive: true });
      await fs.writeFile(filePath, pdfBuffer);

      const publicUrl = `https://api.tanusoft.mn/uploads/${filename}`;
      console.log("‚úÖ [PDF RENDER] –ê–º–∂–∏–ª—Ç—Ç–∞–π! Public URL:", publicUrl);

      return res.status(200).json({
        success: true,
        url: publicUrl,
      });
    } catch (error) {
      console.error("‚ùå [PDF RENDER] PDF “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞:", error);
      return res
        .status(500)
        .json({ success: false, error: "PDF “Ø“Ø—Å–≥—ç–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π" });
    }
  })
);

module.exports = router;

const mongoose = require("mongoose");
const { Schema } = mongoose;

const HAIR_SALON_REASONS = [
  "abandonment", // “Æ–π–ª—á–∏–ª–≥—ç—ç–≥ –¥—É—Ç—É—É –æ—Ä—Ö–∏—Å–æ–Ω
  "unfinished_service", // “Æ–π–ª—á–∏–ª–≥—ç—ç–≥ –±“Ø—Ä—ç–Ω –≥“Ø–π—Ü—ç—Ç —Ö–∏–π–≥—ç—ç–≥“Ø–π
  "safety_violation", // –ê—é—É–ª–≥“Ø–π –∞–∂–∏–ª–ª–∞–≥–∞–∞–Ω—ã –∑”©—Ä—á–∏–ª

  // ü§ù –•–∞—Ä–∏–ª—Ü–∞–∞/—ë—Å –∑“Ø–π
  "rudeness_to_client", // “Æ–π–ª—á–ª“Ø“Ø–ª—ç–≥—á—Ç—ç–π –±“Ø–¥“Ø“Ø–ª—ç–≥ —Ö–∞—Ä—å—Ü—Å–∞–Ω
  "verbal_abuse", // –î–æ—Ä–æ–º–∂–∏–ª—Å–æ–Ω “Ø–≥ —Ö—ç–ª–ª—ç–≥
  "harassment", // –î–∞—Ä–∞–º—Ç/—Ö–∞–ª–¥–ª–∞–≥–∞
  "discrimination", // –Ø–ª–≥–∞–≤–∞—Ä–ª–∞–Ω –≥–∞–¥—É—É—Ä—Ö–∞–ª—Ç
  "intoxicated_on_shift", // –ê–∂–ª—ã–Ω –±–∞–π—Ä–∞–Ω–¥ —Å–æ–≥—Ç—É—É—Ä—É—É–ª–∞—Ö/–º–∞–Ω—Å—É—É—Ä–∞–ª
  "unprofessional_social", // –°–æ—à–∏–∞–ª–¥ –∑–æ—Ö–∏—Å–≥“Ø–π –Ω–∏–π—Ç–ª—ç–ª/–∫–æ–Ω—Ç–µ–Ω—Ç

  "policy_violation", // –î–æ—Ç–æ–æ–¥ –∂—É—Ä–∞–º –∑”©—Ä—á—Å”©–Ω
  "unauthorized_discount", // –ó”©–≤—à”©”©—Ä”©–ª–≥“Ø–π —Ö—è–º–¥—Ä–∞–ª/“Ø–Ω—ç ”©”©—Ä—á–∏–ª—Å”©–Ω
  "photo_without_consent", // –ó—É—Ä–≥–∏–π–≥ –∑”©–≤—à”©”©—Ä”©–ª–≥“Ø–π –∞–≤—Å–∞–Ω/–ø–æ—Å—Ç–æ–ª—Å–æ–Ω
  "privacy_breach", // –•—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –∑–∞–¥—Ä—É—É–ª—Å–∞–Ω
  "confidentiality_breach", // –ù—É—É—Ü–ª–∞–ª –∑”©—Ä—á—Å”©–Ω

  // üß∞ –•”©—Ä”©–Ω–≥”©/–±–∞—Ä–∞–∞ –º–∞—Ç–µ—Ä–∏–∞–ª
  "equipment_damage", // –¢–æ–Ω–æ–≥ —Ç”©—Ö”©”©—Ä”©–º–∂ –≥—ç–º—Ç—ç—ç—Å—ç–Ω
  "tool_loss", // –ë–∞–≥–∞–∂ “Ø—Ä—ç–≥–¥“Ø“Ø–ª—Å—ç–Ω
  "product_waste", // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ —Ö—ç—Ç “Ø—Ä—ç–≥–¥“Ø“Ø–ª—Å—ç–Ω
  "stock_theft", // –ë–∞—Ä–∞–∞ –º–∞—Ç–µ—Ä–∏–∞–ª –∑–∞–≤—à—Å–∞–Ω

  // ‚öñÔ∏è –ù–æ—Ü—Ç–æ–π/–≥—ç—Ä—ç—ç—Ç
  "fraud", // –õ—É–π–≤–∞—Ä, –±–∞—Ä–∏–º—Ç —Ö—É—É—Ä–∞–º—á–ª–∞—Ö
  "contract_breach", // –ì—ç—Ä—ç—ç–Ω–∏–π –∑–∞–∞–ª—Ç –∑”©—Ä—á—Å”©–Ω
  "moonlighting_conflict", // ”®—Ä—Å”©–ª–¥”©–≥—á–∏–¥ –¥–∞–≤—Ö–∞—Ä –∞–∂–∏–ª–ª–∞—Å–∞–Ω (–Ω—É—É—Ü–ª–∞–ª/–≥—ç—Ä—ç—ç –∑”©—Ä—á—Å”©–Ω)

  "other", // –ë—É—Å–∞–¥
];

const VISIBILITY = ["public", "private"];

const blacklistEntrySchema = new Schema(
  {
    artistId: {
      type: Schema.Types.ObjectId,
      ref: "Artist",
      required: true,
      index: true,
    },

    reportedByCompanyId: {
      type: Schema.Types.ObjectId,
      ref: "Company",
      required: true,
      index: true,
    },

    reasonCode: {
      type: String,
      enum: HAIR_SALON_REASONS,
      required: true,
      default: "other",
      index: true,
    },
    reasonText: {
      type: String,
      required: true,
      trim: true,
    },

    incidentDate: { type: Date, required: true, default: Date.now },

    // –ù–æ—Ç–ª–æ—Ö –±–∞—Ä–∏–º—Ç ( –∑—É—Ä–∞–≥/–±–∞—Ä–∏–º—Ç URL, —Ña–π–ª ID –≥.–º. )
    evidences: [
      {
        type: {
          type: String, // image, video, doc, url
          default: "image",
        },
        url: String, // —Ñ–∞–π–ª—ã–Ω URL —ç—Å–≤—ç–ª storage key
        label: String, // —Ç–∞–π–ª–±–∞—Ä
      },
    ],

    visibility: {
      type: String,
      enum: VISIBILITY,
      required: true,
      default: "public",
      index: true,
    },

    // –î–∞–≤—Ç–∞–ª—Ç/—Ç–æ—Ö–∏–æ–ª–¥–ª—ã–Ω –æ–Ω–æ–æ ‚Äî –Ω–æ—Ü—Ç–æ–π –±–∞–π–¥–ª—ã–≥ –∏–ª—ç—Ä—Ö–∏–π–ª—ç—Ö
    severity: {
      type: Number,
      min: 1,
      max: 5,
      default: 3,
    },

    // –î–∞–≤—Ç–∞–Ω –∑”©—Ä—á–∏–ª —ç—Å—ç—Ö
    repeatCount: {
      type: Number,
      default: 1,
      min: 1,
    },
  },
  { timestamps: true }
);

blacklistEntrySchema.index(
  { artistId: 1, reportedByCompanyId: 1, reasonCode: 1, visibility: 1 },
  { unique: false }
);

module.exports = mongoose.model("BlacklistEntry", blacklistEntrySchema);

const mongoose = require("mongoose");
const bcrypt = require("bcryptjs");

const AgentSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
    },
    agent: {
      type: String,
      unique: true,
      required: true,
    },
    banks: {
      type: String,
      enum: [
        "–•–ê–ê–ù –ë–∞–Ω–∫",
        "–ì–æ–ª–æ–º—Ç –ë–∞–Ω–∫",
        "–•–∞—Å–ë–∞–Ω–∫",
        "–¢”©—Ä–∏–π–Ω –±–∞–Ω–∫",
        "–ö–∞–ø–∏—Ç—Ä–æ–Ω –±–∞–Ω–∫",
        "–ê—Ä–∏–≥ –±–∞–Ω–∫",
      ],
    },
    bankNumber: {
      type: Number,
      required: true,
    },
    phone: {
      type: String,
      unique: [true, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –±“Ø—Ä—Ç–≥—ç–ª—Ç—ç–π –±–∞–π–Ω–∞"],
      sparse: true,
      maxlength: [8, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä —Ö–∞–º–≥–∏–π–Ω –∏—Ö–¥—ç—ç 8 –æ—Ä–æ–Ω—Ç–æ–π –±–∞–π–Ω–∞!"],
      required: [true, "–£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä –∑–∞–∞–≤–∞–ª –±–∏—á–Ω—ç “Ø“Ø!"],
    },
    password: {
      type: String,
      required: [true, "–ù—É—É—Ü “Ø–≥ –∑–∞–∞–≤–∞–ª –æ—Ä—É—É–ª–Ω–∞ —É—É!"],
      minlength: [6, "–ù—É—É—Ü “Ø–≥ —Ö–∞–º–≥–∏–π–Ω –±–∞–≥–∞–¥–∞–∞ 6 —Ç—ç–º–¥—ç–≥—Ç—Ç—ç–π –±–∞–π–Ω–∞!"],
      select: false,
    },
    totalcompany: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Company",
        default: [],
      },
    ],
  },
  { timestamps: true }
);

// ‚è≥ Save —Ö–∏–π—Ö–∏–π–Ω ”©–º–Ω”© –Ω—É—É—Ü “Ø–≥–∏–π–≥ —à–∏—Ñ—Ä–ª—ç–Ω—ç
AgentSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next();
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

// üîë –ù—É—É—Ü “Ø–≥ —à–∞–ª–≥–∞—Ö method
AgentSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

module.exports = mongoose.model("Agent", AgentSchema);
